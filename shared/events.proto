syntax = "proto3";

package event;

/**
  Authentication
*/

// Client
message Register {
  string name = 1;
}

// Client
message Login {
  string token = 1;
}

// Server
message AuthToken {
  string token = 1;
}

/**
  News
*/

// Defines what options a user has for a given event
message SuggestedTrade {
  string symbol = 1;
  string type = 2;
  uint32 amount = 3;
}

message NewsAction {
  string name = 1;
  string description = 2;
  repeated SuggestedTrade suggestedTrades = 3;
}
// Notification when a new news event was created
message News {
  string title = 1;
  string description = 2;
  repeated NewsAction actions = 3;
}

message NewsList {
  repeated News news = 1;
}

message CreateNews {
  string title = 1;
  string description = 2;
  repeated NewsAction actions = 3;
}


/**
  Static Listings
*/

message StaticListing {
  string ticker = 1;
  string name = 2;
  string description = 3;
  string logo = 4;
  uint64 amount_shares = 5;
}
// Server
message Listings {
  repeated StaticListing listings = 1;
}

/**
  Listing Prices
  */

// Client
// Subscribe to a the listings orderbook and price history
message SubscribeListingOrderbook {
  string ticker = 1;
}

// Client
message UnsubscribeListingOrderbook {
  string ticker = 1;
}

// Server
// Sends the current orderbook and price history of a listing
message ListingOrderBook {
  string ticker = 1;
  map<int64, uint64> order_book_bid = 2; // price -> amount
  map<int64, uint64> order_book_ask = 3; // price -> amount
  map<uint32, int64> price_history = 4;  // unix timestamp -> price
}


message ListingPrice {
  int64 price = 2;
  uint64 volume = 3;
  int64 bid_price = 4;
  int64 ask_price = 5;
  string symbol = 6;
}
// Server
// Server sends by default to all clients the price updates of all listings
message ListingPrices {
  repeated ListingPrice listings = 1;
}

/**
  Orders
*/


enum OrderType {
  ASK = 0;
  BID = 1;
  IOC = 2; // Immediate or Cancel
}

enum OrderUpdateType {
  Filled = 0;
  PartiallyFilled = 1;
  Cancelled = 2;
}


// Client
// Client places order
message PlaceOrder {
  OrderType type = 1;
  string ticker = 2;
  int64 price = 3;
  uint64 amount = 4;
}
// Client
// Client cancels order
message CancelOrder {
  uint64 id = 1;
}

message PartialCancelOrder {
  uint64 id = 1;
  uint64 amount = 2;
}


// Server
// When a order was created, this is sent to the client
message OrderCreated {
  uint64 id = 1;
  OrderType type = 2;
  string ticker = 3;
  int64 price = 4;
  uint64 amount = 5;
}

// Server
// Send to client when order is partially fullfilled
message OrderPartiallyFullfilled {
  uint64 id = 1;
  // describse how much is left
  uint64 amount_left = 2;
}

// Server
// Send to client when order is fully fullfilled
message OrderFullfilled {
  uint64 id = 1;
}


// Server
// Send to client when order is cancelled
message OrderCanceled {
  uint64 id = 1;
}

message OrderPartialyCancled {
  uint64 id = 1;
  uint64 amount = 2;
}

// Represents order details used when fetching all orders on startup
message InfoOrder {
  uint64 id = 1;
  OrderType type = 2;
  string ticker = 3;
  int64 price = 4;
  uint64 amount = 5;
}

// Server
// Orders pushed initially
message Orders {
  repeated InfoOrder orders = 1;
}


/**
  Positions
*/

// Client

message InfoPosition {
  string ticker = 1;
  int64 amount = 2;
  int64 price = 3;
}

// Server
message Positions {
  repeated InfoPosition positions = 1;
}

/**
  Market Log
*/

message Trade {
  string from = 1;
  string to = 2;
  int64 price = 3;
  uint64 amount = 4;
  string ticker = 5;
}

message Trades {
  repeated Trade trades = 1;
}

message TradeLog {
  uint64 buy_order_id = 1;
  uint64 buy_user_id = 2;
  uint64 sell_order_id = 3;
  uint64 sell_user_id = 4;
  uint64 amount = 5;
  int64 price = 6;
}

/** 
  Aggregated Messages
*/

// Error messages for both Client and Server.
message Error {
  string error = 1;
}

message ClientMessage {
  oneof event {
    // Auth
    Login login = 11;
    Register register = 10;
    // Orderbook/price history
    SubscribeListingOrderbook subscribe_listing = 1;
    UnsubscribeListingOrderbook unsubscribe_listing = 2;
    // Orders
    PlaceOrder place_order = 5;
    CancelOrder cancel_order = 6;
    PartialCancelOrder partial_cancle_order = 7;
    Error error = 8;

    // News (admin)
    CreateNews create_news = 9;
  }
}


message ServerMessage {
  oneof event {
    // Auth
    AuthToken auth_token = 1;
    // News
    News new_news = 2;
    NewsList news_list = 3;
    // Static Listings List
    Listings listings = 4;
    // Listing List Prices
    ListingPrices listing_updates = 5;
    // Orders
    OrderCreated order_created = 6;
    OrderPartiallyFullfilled order_partially_fullfilled = 7;
    OrderFullfilled order_fullfilled = 8;
    OrderCanceled order_canceld = 9;
    OrderPartialyCancled order_decreased = 10;
    Orders orders = 11;
    // Positions
    Positions positions = 12;
    // Error
    Error error = 13;
    TradeLog trade_log = 14;
  }
}
